// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package authorization

import (
	"context"
	"github.com/ONSdigital/dp-api-permissions/permissions"
	"sync"
)

var (
	lockAuthorizerMockAllow sync.RWMutex
)

// AuthorizerMock is a mock implementation of Authorizer.
//
//     func TestSomethingThatUsesAuthorizer(t *testing.T) {
//
//         // make and configure a mocked Authorizer
//         mockedAuthorizer := &AuthorizerMock{
//             AllowFunc: func(ctx context.Context, required permissions.Policy, serviceToken string, userToken string, collectionID string, datasetID string) error {
// 	               panic("TODO: mock out the Allow method")
//             },
//         }
//
//         // TODO: use mockedAuthorizer in code that requires Authorizer
//         //       and then make assertions.
//
//     }
type AuthorizerMock struct {
	// AllowFunc mocks the Allow method.
	AllowFunc func(ctx context.Context, required permissions.Policy, serviceToken string, userToken string, collectionID string, datasetID string) error

	// calls tracks calls to the methods.
	calls struct {
		// Allow holds details about calls to the Allow method.
		Allow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Required is the required argument value.
			Required permissions.Policy
			// ServiceToken is the serviceToken argument value.
			ServiceToken string
			// UserToken is the userToken argument value.
			UserToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// DatasetID is the datasetID argument value.
			DatasetID string
		}
	}
}

// Allow calls AllowFunc.
func (mock *AuthorizerMock) Allow(ctx context.Context, required permissions.Policy, serviceToken string, userToken string, collectionID string, datasetID string) error {
	if mock.AllowFunc == nil {
		panic("moq: AuthorizerMock.AllowFunc is nil but Authorizer.Allow was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Required     permissions.Policy
		ServiceToken string
		UserToken    string
		CollectionID string
		DatasetID    string
	}{
		Ctx:          ctx,
		Required:     required,
		ServiceToken: serviceToken,
		UserToken:    userToken,
		CollectionID: collectionID,
		DatasetID:    datasetID,
	}
	lockAuthorizerMockAllow.Lock()
	mock.calls.Allow = append(mock.calls.Allow, callInfo)
	lockAuthorizerMockAllow.Unlock()
	return mock.AllowFunc(ctx, required, serviceToken, userToken, collectionID, datasetID)
}

// AllowCalls gets all the calls that were made to Allow.
// Check the length with:
//     len(mockedAuthorizer.AllowCalls())
func (mock *AuthorizerMock) AllowCalls() []struct {
	Ctx          context.Context
	Required     permissions.Policy
	ServiceToken string
	UserToken    string
	CollectionID string
	DatasetID    string
} {
	var calls []struct {
		Ctx          context.Context
		Required     permissions.Policy
		ServiceToken string
		UserToken    string
		CollectionID string
		DatasetID    string
	}
	lockAuthorizerMockAllow.RLock()
	calls = mock.calls.Allow
	lockAuthorizerMockAllow.RUnlock()
	return calls
}
