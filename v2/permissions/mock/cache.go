// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-authorisation/v2/permissions"
	health "github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that CacheMock does implement permissions.Cache.
// If this is not the case, regenerate this file with moq.
var _ permissions.Cache = &CacheMock{}

// CacheMock is a mock implementation of permissions.Cache.
//
// 	func TestSomethingThatUsesCache(t *testing.T) {
//
// 		// make and configure a mocked permissions.Cache
// 		mockedCache := &CacheMock{
// 			CloseFunc: func(ctx context.Context) error {
// 				panic("mock out the Close method")
// 			},
// 			GetPermissionsBundleFunc: func(ctx context.Context) (permissions.Bundle, error) {
// 				panic("mock out the GetPermissionsBundle method")
// 			},
// 			HealthCheckFunc: func(ctx context.Context, state *health.CheckState) error {
// 				panic("mock out the HealthCheck method")
// 			},
// 		}
//
// 		// use mockedCache in code that requires permissions.Cache
// 		// and then make assertions.
//
// 	}
type CacheMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// GetPermissionsBundleFunc mocks the GetPermissionsBundle method.
	GetPermissionsBundleFunc func(ctx context.Context) (permissions.Bundle, error)

	// HealthCheckFunc mocks the HealthCheck method.
	HealthCheckFunc func(ctx context.Context, state *health.CheckState) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetPermissionsBundle holds details about calls to the GetPermissionsBundle method.
		GetPermissionsBundle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// HealthCheck holds details about calls to the HealthCheck method.
		HealthCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *health.CheckState
		}
	}
	lockClose                sync.RWMutex
	lockGetPermissionsBundle sync.RWMutex
	lockHealthCheck          sync.RWMutex
}

// Close calls CloseFunc.
func (mock *CacheMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("CacheMock.CloseFunc: method is nil but Cache.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedCache.CloseCalls())
func (mock *CacheMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetPermissionsBundle calls GetPermissionsBundleFunc.
func (mock *CacheMock) GetPermissionsBundle(ctx context.Context) (permissions.Bundle, error) {
	if mock.GetPermissionsBundleFunc == nil {
		panic("CacheMock.GetPermissionsBundleFunc: method is nil but Cache.GetPermissionsBundle was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetPermissionsBundle.Lock()
	mock.calls.GetPermissionsBundle = append(mock.calls.GetPermissionsBundle, callInfo)
	mock.lockGetPermissionsBundle.Unlock()
	return mock.GetPermissionsBundleFunc(ctx)
}

// GetPermissionsBundleCalls gets all the calls that were made to GetPermissionsBundle.
// Check the length with:
//     len(mockedCache.GetPermissionsBundleCalls())
func (mock *CacheMock) GetPermissionsBundleCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetPermissionsBundle.RLock()
	calls = mock.calls.GetPermissionsBundle
	mock.lockGetPermissionsBundle.RUnlock()
	return calls
}

// HealthCheck calls HealthCheckFunc.
func (mock *CacheMock) HealthCheck(ctx context.Context, state *health.CheckState) error {
	if mock.HealthCheckFunc == nil {
		panic("CacheMock.HealthCheckFunc: method is nil but Cache.HealthCheck was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *health.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockHealthCheck.Lock()
	mock.calls.HealthCheck = append(mock.calls.HealthCheck, callInfo)
	mock.lockHealthCheck.Unlock()
	return mock.HealthCheckFunc(ctx, state)
}

// HealthCheckCalls gets all the calls that were made to HealthCheck.
// Check the length with:
//     len(mockedCache.HealthCheckCalls())
func (mock *CacheMock) HealthCheckCalls() []struct {
	Ctx   context.Context
	State *health.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *health.CheckState
	}
	mock.lockHealthCheck.RLock()
	calls = mock.calls.HealthCheck
	mock.lockHealthCheck.RUnlock()
	return calls
}
