// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package auth

import (
	"context"
	"github.com/ONSdigital/dp-permissions/permissions"
	"sync"
)

var (
	lockAuthenticatorMockVet sync.RWMutex
)

// AuthenticatorMock is a mock implementation of Authenticator.
//
//     func TestSomethingThatUsesAuthenticator(t *testing.T) {
//
//         // make and configure a mocked Authenticator
//         mockedAuthenticator := &AuthenticatorMock{
//             VetFunc: func(ctx context.Context, required permissions.CRUD, serviceToken string, userToken string, collectionID string, datasetID string) error {
// 	               panic("TODO: mock out the Vet method")
//             },
//         }
//
//         // TODO: use mockedAuthenticator in code that requires Authenticator
//         //       and then make assertions.
//
//     }
type AuthenticatorMock struct {
	// VetFunc mocks the Vet method.
	VetFunc func(ctx context.Context, required permissions.CRUD, serviceToken string, userToken string, collectionID string, datasetID string) error

	// calls tracks calls to the methods.
	calls struct {
		// Vet holds details about calls to the Vet method.
		Vet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Required is the required argument value.
			Required permissions.CRUD
			// ServiceToken is the serviceToken argument value.
			ServiceToken string
			// UserToken is the userToken argument value.
			UserToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// DatasetID is the datasetID argument value.
			DatasetID string
		}
	}
}

// Vet calls VetFunc.
func (mock *AuthenticatorMock) Vet(ctx context.Context, required permissions.CRUD, serviceToken string, userToken string, collectionID string, datasetID string) error {
	if mock.VetFunc == nil {
		panic("moq: AuthenticatorMock.VetFunc is nil but Authenticator.Vet was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Required     permissions.CRUD
		ServiceToken string
		UserToken    string
		CollectionID string
		DatasetID    string
	}{
		Ctx:          ctx,
		Required:     required,
		ServiceToken: serviceToken,
		UserToken:    userToken,
		CollectionID: collectionID,
		DatasetID:    datasetID,
	}
	lockAuthenticatorMockVet.Lock()
	mock.calls.Vet = append(mock.calls.Vet, callInfo)
	lockAuthenticatorMockVet.Unlock()
	return mock.VetFunc(ctx, required, serviceToken, userToken, collectionID, datasetID)
}

// VetCalls gets all the calls that were made to Vet.
// Check the length with:
//     len(mockedAuthenticator.VetCalls())
func (mock *AuthenticatorMock) VetCalls() []struct {
	Ctx          context.Context
	Required     permissions.CRUD
	ServiceToken string
	UserToken    string
	CollectionID string
	DatasetID    string
} {
	var calls []struct {
		Ctx          context.Context
		Required     permissions.CRUD
		ServiceToken string
		UserToken    string
		CollectionID string
		DatasetID    string
	}
	lockAuthenticatorMockVet.RLock()
	calls = mock.calls.Vet
	lockAuthenticatorMockVet.RUnlock()
	return calls
}
