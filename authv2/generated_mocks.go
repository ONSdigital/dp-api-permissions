// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package authv2

import (
	"context"
	"sync"
)

var (
	lockClienterMockGetCallerPermissions sync.RWMutex
)

// ClienterMock is a mock implementation of Clienter.
//
//     func TestSomethingThatUsesClienter(t *testing.T) {
//
//         // make and configure a mocked Clienter
//         mockedClienter := &ClienterMock{
//             GetCallerPermissionsFunc: func(ctx context.Context, params Parameters) (*Permissions, error) {
// 	               panic("TODO: mock out the GetCallerPermissions method")
//             },
//         }
//
//         // TODO: use mockedClienter in code that requires Clienter
//         //       and then make assertions.
//
//     }
type ClienterMock struct {
	// GetCallerPermissionsFunc mocks the GetCallerPermissions method.
	GetCallerPermissionsFunc func(ctx context.Context, params Parameters) (*Permissions, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCallerPermissions holds details about calls to the GetCallerPermissions method.
		GetCallerPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params Parameters
		}
	}
}

// GetCallerPermissions calls GetCallerPermissionsFunc.
func (mock *ClienterMock) GetCallerPermissions(ctx context.Context, params Parameters) (*Permissions, error) {
	if mock.GetCallerPermissionsFunc == nil {
		panic("moq: ClienterMock.GetCallerPermissionsFunc is nil but Clienter.GetCallerPermissions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params Parameters
	}{
		Ctx:    ctx,
		Params: params,
	}
	lockClienterMockGetCallerPermissions.Lock()
	mock.calls.GetCallerPermissions = append(mock.calls.GetCallerPermissions, callInfo)
	lockClienterMockGetCallerPermissions.Unlock()
	return mock.GetCallerPermissionsFunc(ctx, params)
}

// GetCallerPermissionsCalls gets all the calls that were made to GetCallerPermissions.
// Check the length with:
//     len(mockedClienter.GetCallerPermissionsCalls())
func (mock *ClienterMock) GetCallerPermissionsCalls() []struct {
	Ctx    context.Context
	Params Parameters
} {
	var calls []struct {
		Ctx    context.Context
		Params Parameters
	}
	lockClienterMockGetCallerPermissions.RLock()
	calls = mock.calls.GetCallerPermissions
	lockClienterMockGetCallerPermissions.RUnlock()
	return calls
}

var (
	lockVerifierMockCheckPermissionsRequirementsSatisfied sync.RWMutex
)

// VerifierMock is a mock implementation of Verifier.
//
//     func TestSomethingThatUsesVerifier(t *testing.T) {
//
//         // make and configure a mocked Verifier
//         mockedVerifier := &VerifierMock{
//             CheckPermissionsRequirementsSatisfiedFunc: func(ctx context.Context, callerPermissions *Permissions, requiredPermissions *Permissions) error {
// 	               panic("TODO: mock out the CheckPermissionsRequirementsSatisfied method")
//             },
//         }
//
//         // TODO: use mockedVerifier in code that requires Verifier
//         //       and then make assertions.
//
//     }
type VerifierMock struct {
	// CheckPermissionsRequirementsSatisfiedFunc mocks the CheckPermissionsRequirementsSatisfied method.
	CheckPermissionsRequirementsSatisfiedFunc func(ctx context.Context, callerPermissions *Permissions, requiredPermissions *Permissions) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckPermissionsRequirementsSatisfied holds details about calls to the CheckPermissionsRequirementsSatisfied method.
		CheckPermissionsRequirementsSatisfied []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CallerPermissions is the callerPermissions argument value.
			CallerPermissions *Permissions
			// RequiredPermissions is the requiredPermissions argument value.
			RequiredPermissions *Permissions
		}
	}
}

// CheckPermissionsRequirementsSatisfied calls CheckPermissionsRequirementsSatisfiedFunc.
func (mock *VerifierMock) CheckPermissionsRequirementsSatisfied(ctx context.Context, callerPermissions *Permissions, requiredPermissions *Permissions) error {
	if mock.CheckPermissionsRequirementsSatisfiedFunc == nil {
		panic("moq: VerifierMock.CheckPermissionsRequirementsSatisfiedFunc is nil but Verifier.CheckPermissionsRequirementsSatisfied was just called")
	}
	callInfo := struct {
		Ctx                 context.Context
		CallerPermissions   *Permissions
		RequiredPermissions *Permissions
	}{
		Ctx:                 ctx,
		CallerPermissions:   callerPermissions,
		RequiredPermissions: requiredPermissions,
	}
	lockVerifierMockCheckPermissionsRequirementsSatisfied.Lock()
	mock.calls.CheckPermissionsRequirementsSatisfied = append(mock.calls.CheckPermissionsRequirementsSatisfied, callInfo)
	lockVerifierMockCheckPermissionsRequirementsSatisfied.Unlock()
	return mock.CheckPermissionsRequirementsSatisfiedFunc(ctx, callerPermissions, requiredPermissions)
}

// CheckPermissionsRequirementsSatisfiedCalls gets all the calls that were made to CheckPermissionsRequirementsSatisfied.
// Check the length with:
//     len(mockedVerifier.CheckPermissionsRequirementsSatisfiedCalls())
func (mock *VerifierMock) CheckPermissionsRequirementsSatisfiedCalls() []struct {
	Ctx                 context.Context
	CallerPermissions   *Permissions
	RequiredPermissions *Permissions
} {
	var calls []struct {
		Ctx                 context.Context
		CallerPermissions   *Permissions
		RequiredPermissions *Permissions
	}
	lockVerifierMockCheckPermissionsRequirementsSatisfied.RLock()
	calls = mock.calls.CheckPermissionsRequirementsSatisfied
	lockVerifierMockCheckPermissionsRequirementsSatisfied.RUnlock()
	return calls
}
