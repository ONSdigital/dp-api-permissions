// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package authv2

import (
	"context"
	"sync"
)

var (
	lockAuthoriserMockCheckCallerDatasetPermissions sync.RWMutex
)

// AuthoriserMock is a mock implementation of Authoriser.
//
//     func TestSomethingThatUsesAuthoriser(t *testing.T) {
//
//         // make and configure a mocked Authoriser
//         mockedAuthoriser := &AuthoriserMock{
//             CheckCallerDatasetPermissionsFunc: func(ctx context.Context, required *Permissions, params *Parameters) error {
// 	               panic("TODO: mock out the CheckCallerDatasetPermissions method")
//             },
//         }
//
//         // TODO: use mockedAuthoriser in code that requires Authoriser
//         //       and then make assertions.
//
//     }
type AuthoriserMock struct {
	// CheckCallerDatasetPermissionsFunc mocks the CheckCallerDatasetPermissions method.
	CheckCallerDatasetPermissionsFunc func(ctx context.Context, required *Permissions, params *Parameters) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckCallerDatasetPermissions holds details about calls to the CheckCallerDatasetPermissions method.
		CheckCallerDatasetPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Required is the required argument value.
			Required *Permissions
			// Params is the params argument value.
			Params *Parameters
		}
	}
}

// CheckCallerDatasetPermissions calls CheckCallerDatasetPermissionsFunc.
func (mock *AuthoriserMock) CheckCallerDatasetPermissions(ctx context.Context, required *Permissions, params *Parameters) error {
	if mock.CheckCallerDatasetPermissionsFunc == nil {
		panic("moq: AuthoriserMock.CheckCallerDatasetPermissionsFunc is nil but Authoriser.CheckCallerDatasetPermissions was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Required *Permissions
		Params   *Parameters
	}{
		Ctx:      ctx,
		Required: required,
		Params:   params,
	}
	lockAuthoriserMockCheckCallerDatasetPermissions.Lock()
	mock.calls.CheckCallerDatasetPermissions = append(mock.calls.CheckCallerDatasetPermissions, callInfo)
	lockAuthoriserMockCheckCallerDatasetPermissions.Unlock()
	return mock.CheckCallerDatasetPermissionsFunc(ctx, required, params)
}

// CheckCallerDatasetPermissionsCalls gets all the calls that were made to CheckCallerDatasetPermissions.
// Check the length with:
//     len(mockedAuthoriser.CheckCallerDatasetPermissionsCalls())
func (mock *AuthoriserMock) CheckCallerDatasetPermissionsCalls() []struct {
	Ctx      context.Context
	Required *Permissions
	Params   *Parameters
} {
	var calls []struct {
		Ctx      context.Context
		Required *Permissions
		Params   *Parameters
	}
	lockAuthoriserMockCheckCallerDatasetPermissions.RLock()
	calls = mock.calls.CheckCallerDatasetPermissions
	lockAuthoriserMockCheckCallerDatasetPermissions.RUnlock()
	return calls
}
