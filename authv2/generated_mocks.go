// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package authv2

import (
	"context"
	"net/http"
	"sync"
)

var (
	lockClienterMockGetCallerDatasetPermissions sync.RWMutex
)

// ClienterMock is a mock implementation of Clienter.
//
//     func TestSomethingThatUsesClienter(t *testing.T) {
//
//         // make and configure a mocked Clienter
//         mockedClienter := &ClienterMock{
//             GetCallerDatasetPermissionsFunc: func(ctx context.Context, params Parameters) (*Permissions, error) {
// 	               panic("TODO: mock out the GetCallerDatasetPermissions method")
//             },
//         }
//
//         // TODO: use mockedClienter in code that requires Clienter
//         //       and then make assertions.
//
//     }
type ClienterMock struct {
	// GetCallerDatasetPermissionsFunc mocks the GetCallerDatasetPermissions method.
	GetCallerDatasetPermissionsFunc func(ctx context.Context, params Parameters) (*Permissions, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCallerDatasetPermissions holds details about calls to the GetCallerDatasetPermissions method.
		GetCallerDatasetPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params Parameters
		}
	}
}

// GetCallerDatasetPermissions calls GetCallerDatasetPermissionsFunc.
func (mock *ClienterMock) GetCallerDatasetPermissions(ctx context.Context, params Parameters) (*Permissions, error) {
	if mock.GetCallerDatasetPermissionsFunc == nil {
		panic("moq: ClienterMock.GetCallerDatasetPermissionsFunc is nil but Clienter.GetCallerDatasetPermissions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params Parameters
	}{
		Ctx:    ctx,
		Params: params,
	}
	lockClienterMockGetCallerDatasetPermissions.Lock()
	mock.calls.GetCallerDatasetPermissions = append(mock.calls.GetCallerDatasetPermissions, callInfo)
	lockClienterMockGetCallerDatasetPermissions.Unlock()
	return mock.GetCallerDatasetPermissionsFunc(ctx, params)
}

// GetCallerDatasetPermissionsCalls gets all the calls that were made to GetCallerDatasetPermissions.
// Check the length with:
//     len(mockedClienter.GetCallerDatasetPermissionsCalls())
func (mock *ClienterMock) GetCallerDatasetPermissionsCalls() []struct {
	Ctx    context.Context
	Params Parameters
} {
	var calls []struct {
		Ctx    context.Context
		Params Parameters
	}
	lockClienterMockGetCallerDatasetPermissions.RLock()
	calls = mock.calls.GetCallerDatasetPermissions
	lockClienterMockGetCallerDatasetPermissions.RUnlock()
	return calls
}

var (
	lockVerifierMockCheckAuthorisation sync.RWMutex
)

// VerifierMock is a mock implementation of Verifier.
//
//     func TestSomethingThatUsesVerifier(t *testing.T) {
//
//         // make and configure a mocked Verifier
//         mockedVerifier := &VerifierMock{
//             CheckAuthorisationFunc: func(ctx context.Context, callerPermissions *Permissions, requiredPermissions *Permissions) error {
// 	               panic("TODO: mock out the CheckAuthorisation method")
//             },
//         }
//
//         // TODO: use mockedVerifier in code that requires Verifier
//         //       and then make assertions.
//
//     }
type VerifierMock struct {
	// CheckAuthorisationFunc mocks the CheckAuthorisation method.
	CheckAuthorisationFunc func(ctx context.Context, callerPermissions *Permissions, requiredPermissions *Permissions) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckAuthorisation holds details about calls to the CheckAuthorisation method.
		CheckAuthorisation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CallerPermissions is the callerPermissions argument value.
			CallerPermissions *Permissions
			// RequiredPermissions is the requiredPermissions argument value.
			RequiredPermissions *Permissions
		}
	}
}

// CheckAuthorisation calls CheckAuthorisationFunc.
func (mock *VerifierMock) CheckAuthorisation(ctx context.Context, callerPermissions *Permissions, requiredPermissions *Permissions) error {
	if mock.CheckAuthorisationFunc == nil {
		panic("moq: VerifierMock.CheckAuthorisationFunc is nil but Verifier.CheckAuthorisation was just called")
	}
	callInfo := struct {
		Ctx                 context.Context
		CallerPermissions   *Permissions
		RequiredPermissions *Permissions
	}{
		Ctx:                 ctx,
		CallerPermissions:   callerPermissions,
		RequiredPermissions: requiredPermissions,
	}
	lockVerifierMockCheckAuthorisation.Lock()
	mock.calls.CheckAuthorisation = append(mock.calls.CheckAuthorisation, callInfo)
	lockVerifierMockCheckAuthorisation.Unlock()
	return mock.CheckAuthorisationFunc(ctx, callerPermissions, requiredPermissions)
}

// CheckAuthorisationCalls gets all the calls that were made to CheckAuthorisation.
// Check the length with:
//     len(mockedVerifier.CheckAuthorisationCalls())
func (mock *VerifierMock) CheckAuthorisationCalls() []struct {
	Ctx                 context.Context
	CallerPermissions   *Permissions
	RequiredPermissions *Permissions
} {
	var calls []struct {
		Ctx                 context.Context
		CallerPermissions   *Permissions
		RequiredPermissions *Permissions
	}
	lockVerifierMockCheckAuthorisation.RLock()
	calls = mock.calls.CheckAuthorisation
	lockVerifierMockCheckAuthorisation.RUnlock()
	return calls
}

var (
	lockHTTPClienterMockDo sync.RWMutex
)

// HTTPClienterMock is a mock implementation of HTTPClienter.
//
//     func TestSomethingThatUsesHTTPClienter(t *testing.T) {
//
//         // make and configure a mocked HTTPClienter
//         mockedHTTPClienter := &HTTPClienterMock{
//             DoFunc: func(ctx context.Context, req *http.Request) (*http.Response, error) {
// 	               panic("TODO: mock out the Do method")
//             },
//         }
//
//         // TODO: use mockedHTTPClienter in code that requires HTTPClienter
//         //       and then make assertions.
//
//     }
type HTTPClienterMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, req *http.Request) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *http.Request
		}
	}
}

// Do calls DoFunc.
func (mock *HTTPClienterMock) Do(ctx context.Context, req *http.Request) (*http.Response, error) {
	if mock.DoFunc == nil {
		panic("moq: HTTPClienterMock.DoFunc is nil but HTTPClienter.Do was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *http.Request
	}{
		Ctx: ctx,
		Req: req,
	}
	lockHTTPClienterMockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	lockHTTPClienterMockDo.Unlock()
	return mock.DoFunc(ctx, req)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedHTTPClienter.DoCalls())
func (mock *HTTPClienterMock) DoCalls() []struct {
	Ctx context.Context
	Req *http.Request
} {
	var calls []struct {
		Ctx context.Context
		Req *http.Request
	}
	lockHTTPClienterMockDo.RLock()
	calls = mock.calls.Do
	lockHTTPClienterMockDo.RUnlock()
	return calls
}
